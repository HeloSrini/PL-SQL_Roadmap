TYPES_OF_ERRORS (HANDLED) 
1.NO_DATA_FOUND
2.TOO_MANY_ROWS
3.VALUE_ERROR
4.ZERO_DIVIDE 

1. Write a PL/SQL block to handle the exception when a division by zero occurs.

ZERO_DIVIDE_ERROR:-

DECLARE
   A NUMBER:=10;
   B NUMBER:= 0;
   RES  NUMBER;
BEGIN
   RES:=A/B;
   DBMS_OUTPUT.PUT_LINE('RESULT OF A AND B IS' || RES);
EXCEPTION
  WHEN ZERO_DIVIDE THEN
     DBMS_OUTPUT.PUT_LINE('dividing by zero please check the values again');
END;
/
   
2. Handle the NO_DATA_FOUND exception when retrieving a row from a table and no matching record is found.

NO_DATA_FOUND:-

DECLARE
   temp VARCHAR2(10);
BEGIN
   SELECT  EMPID  into temp from EMP_SRINI WHERE EMP_NAME ='GOPAL';
EXCEPTION
  WHEN NO_DATA_FOUND THEN
          DBMS_OUTPUT.PUT_LINE('ERROR');
  WHEN OTHERS THEN
         DBMS_OUTPUT.PUT_LINE('ERROR HANDLED');
END;
/
 
3. Handle the TOO_MANY_ROWS exception when retrieving multiple rows instead of a single row from a table.

TOO_MANY_ROWS:-

DECLARE
temp VARCHAR2(20);
BEGIN
  SELECT GENDER INTO temp from EMP_SRINI;
  DBMS_OUTPUT.PUT_LINE(temp);
EXCEPTION
  WHEN TOO_MANY_ROWS THEN
      DBMS_OUTPUT.PUT_LINE('Error trying to SELECT too many rows');
END;
/

4 . Handle the VALUE_ERROR exception when assigning an incompatible value to a variable.

VALUE_ERROR:-

DECLARE
    s_num NUMBER(3);  
BEGIN
    s_num := 1500; 
    DBMS_OUTPUT.PUT_LINE('Block Executed Sucessfully...!');
EXCEPTION
    WHEN VALUE_ERROR THEN
        DBMS_OUTPUT.PUT_LINE('Error Message : Entered number is large set to Small Number');
END;

5.Handle the NO_DATA_FOUND exception when retrieving a row from a table and no matching record is found.

INVALID_NUMBER:-

DECLARE
    num NUMBER;
    str VARCHAR2(10) := '&INP';  
BEGIN
    num := TO_NUMBER(str); 
EXCEPTION
    WHEN VALUE_ERROR THEN
        DBMS_OUTPUT.PUT_LINE('Error: Entered String will Contains a Characters...!');
END;
/


